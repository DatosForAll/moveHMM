
Roland's comments:

1. You have a habit of including a space at the end of sentences (before . or , or ? or : etc.). What's that about? (This is just a minor point of course...)

2. The ordering of the betas in the fitted model object is unclear (i.e. which column corresponds to which transition probability?). For example, for a three-state model with one covariate, I get this beta matrix:

Transition probabilities parameters :
-----------------------------------
              [,1]          [,2]      [,3]      [,4]         [,5]      [,6]
[1,] -3.7003659639 -1.1746899915  1.920550 -1.874243 -2.222483030 -2.861793
[2,] -0.0004190589 -0.0003197096 -2.516041 -1.363843  0.001613644 -4.384022

More clear, I think, would be something like the following:

Parameters determining the state transition probabilities:
-----------------------------------
intercept
             [,1]           [,2]          [,3]
[1,]            /  -3.7003659639 -1.1746899915
[2,]     1.920550              /     -1.874243 
[3,] -2.222483030      -2.861793             /

dist_water slope coefficient
              [,1]          [,2]          [,3]
[1,]             / -0.0004190589 -0.0003197096 
[2,]     -2.516041             /     -1.363843
[3,]   0.001613644     -4.384022             /

What do you think? I guess the latter would create all sorts of problems with CIs etc. In that case forget about it – but we have to make sure users will know how to read the output.

3. I fitted a couple of models, and found the following curiosity when looking at the AICs:
> AIC(m0)
[1] 4107.374
> AIC(m1)
[1] 3820.472
> AIC(m2)
[1] 3817.489
> AIC(m3)
[1] 3822.771
> AIC(m4)
[1] 3733.588
> AIC(m0,m1,m2,m3,m4)
  Model      AIC
1    m1 3820.472
2    m2 3820.472
3    m3 3820.472
4    m4 3820.472
5    m0 4107.374

There seems to be some problem with the function AIC when more than two models are considered at once.

4. Do we need more documentation for the viterbi and stateProbs functions? (I guess not, just wanted to ask.)

5. In ?simData, should we add an example where we provide the covariate values? I couldn't get the syntax right. This is my attempt (which obviously doesn't work):
> covs<-data.frame(dist_city=rpois(10000,5))
> simData(10,2,stepDist="gamma",angleDist="vm",c(1,5,0.5,3),anglePar=c(pi,0,1,1),beta=matrix(c(-2,-2,0.1,0.1),nrow=2,byrow=2),covs=covs)
Error in subCovs[k, 1] : incorrect number of dimensions

6. Also in ?simData the existing examples might be confusing. For example, in the first one, you have:
stepPar <- c(1,10,1,5,0.2,0.3) # mean1, mean2, sd1, sd2, z1, z2
anglePar <- c(0,pi,0.5,2) # mean1, mean2, k1, k2
Here you seem to have high turning angles in the state with long steps - not what you see in real movement data, so not what people expect.

7. The numerical maximization is highly unstable for the elk data when dist_water is included. For example:

> for (zoo in 1:5){
+   mu0 <- c(runif(1,0.04,0.2),runif(1,0.8,3))
+   sigma0 <- c(runif(1,0.04,0.2),runif(1,0.5,2))
+   zeromass0 <- runif(2,0,0.1)
+   stepPar0 <- c(mu0,sigma0,zeromass0)
+   angleMean0 <- c(pi,0) # angle mean
+   kappa0 <- runif(2,0.1,2)
+   anglePar0 <- c(angleMean0,kappa0)
+   m <- fitHMM(data=data,nbStates=2,stepPar0=stepPar0,anglePar0=anglePar0,formula=~1)
+   print(AIC(m))
+ }
[1] 3828.434
[1] 3828.434
[1] 3828.434
[1] 3828.434
[1] 3828.434

... works fine, but when I include dist_water things start to go wrong:

> for (zoo in 1:5){
+   mu0 <- c(runif(1,0.04,0.2),runif(1,0.8,3))
+   sigma0 <- c(runif(1,0.04,0.2),runif(1,0.5,2))
+   zeromass0 <- runif(2,0,0.1)
+   stepPar0 <- c(mu0,sigma0,zeromass0)
+   angleMean0 <- c(pi,0) # angle mean
+   kappa0 <- runif(2,0.1,2)
+   anglePar0 <- c(angleMean0,kappa0)
+   m <- fitHMM(data=data,nbStates=2,stepPar0=stepPar0,anglePar0=anglePar0,formula=~dist_water)
+   print(AIC(m))
+ }
[1] 3816.886
[1] 3815.974
Error in nlm(nLogLike, wpar, nbStates, bounds, parSize, data, stepDist,  : 
  non-finite value supplied by 'nlm'
  
This is due to the high values of this covariate 
(such that tiny changes in the beta values make a huge difference, which presumably also leads to the error above). 
If the covariate values are divided by 1000, i.e.
> trackData$dist_water <- trackData$dist_water/1000
then the maximization is stable and returns the correct MLE:

> for (zoo in 1:5){
+   mu0 <- c(runif(1,0.04,0.2),runif(1,2,3))
+   sigma0 <- c(runif(1,0.04,0.2),runif(1,0.5,2))
+   zeromass0 <- runif(2,0,0.1)
+   stepPar0 <- c(mu0,sigma0,zeromass0)
+   angleMean0 <- c(pi,0) # angle mean
+   kappa0 <- runif(2,0.1,2)
+   anglePar0 <- c(angleMean0,kappa0)
+   m <- fitHMM(data=data,nbStates=2,stepPar0=stepPar0,anglePar0=anglePar0,formula=~dist_water)
+   print(AIC(m))
+ }
[1] 3815.899
[1] 3815.899
[1] 3815.899
[1] 3815.899
[1] 3815.899

So I suggest that we do this in the vignette and talk about it. 
Although, in fact, the standard approach to this sort of numerical problem is to standardize the covariate values, 
so we should perhaps do that instead:
> trackData$dist_water <- (trackData$dist_water-mean(trackData$dist_water))/sd(trackData$dist_water)
This also returns the correct MLEs with high reliability. Note it's exactly the same likelihood value at the maximum, 
since we are considering a simple linear transformation of the covariate values. The beta values change, the likelihood doesn't.

8. I see that you set iterlim=1000 in nlm. 
The user should be able to increse this value if necessary (it can happen that you need more than 1000 iterations!).
Alternatively, just set it to some outrageously high value like 100000.

9. In case of numerical instability, it sometimes helps to play around with the stepmax option within nlm. 
Can you add an option to the fitHMM function such that the user can change this? (Hardly anybody will ever use this - but I would.)

10. I noticed that when plotting a fitted model object, it can happen that the limits of the y-axis (ylim) are such that 
for some of the states not the entire density is visible ('cause density values are higher than the upper limit of ylim.

11. Also regarding visualization, I noticed that the plotted tracks can sometimes look a bit odd, namely when the
range of movement is much wider in one dimension than in the other (but still plotted in a quadratic plot). For example,
xlim=c(50,250) and ylim=c(-500,500) makes a quadratic plot look very stretched. Would it make sense to first identify the 
wider range, then plotting accordingly in both dimensions – i.e., ylim=c(-500,500) and xlim=c(-350,650) in the above example?

12. Plus one more visualization issue. When I call plot(m) where m is a model fitted to say 6 (Wild Haggis) animals, then 
I get the following sequence of plots:
- track animal 1
- step length distributions
- turning angle distributions
- track animal 2
- step length distributions
- turning angles distributions
...
- transition probs functions
Why do we repeatedly show the steps and turns distributions when they are the same for all animals?
I'd have expected this sequence:
- step length distributions
- turning angle distributions
- transition probs functions
- track animal 1
- track animal 2
...
- track animal 6

13. I just saw this text in ?simData>
"For example, in a 3-state HMM with 2 covariates, the matrix beta has three rows (intercept + two covariates) 
and six columns (six non-diagonal elements in the 3x3 transition probability matrix)."
(Almost) perfect, I'd just add information on how the matrix is filled:
"For example, in a 3-state HMM with 2 covariates, the matrix beta has three rows (intercept + two covariates) 
and six columns (six non-diagonal elements in the 3x3 transition probability matrix, filled in row-wise)."

14. Viterbi help file: 
I'd change 
"Reconstructs the most probable states sequence, using the Viterbi algorithm."
to 
"For a given model, reconstructs the most probable state sequence using the Viterbi algorithm."
Also the line
m <- ex$m # Fitted model, as returned by fitHMM
in the example is a bit unclear to me. What kind of object is 'ex'?

15. stateProbs help file:
I'd change
"Computes the probability of being in each state in each observation."
to
"For a given model, computes the probability of the process being in the different states at each time point."
Plus again the issue with the object 'ex'.

16. Just came across this:
> plotPR(m)
Computing pseudo-residuals... Note: Some angles are equal to pi, and the corresponding pseudo-residuals are not included
Should we perhaps indicate why they are not included? If I recall correctly, it's because they are undefined or equal to -Inf.
(By the way, I'm quite surprised to see how extremely well the two-state model seems to fit the elk step lengths - quite uncommon!)

17. A slightly more important issue with the residuals:
It will often be useful to look at the sample ACF function of the residuals. The idea here is that if there's autocorrelation left in the residuals, then the model has failed to capture all the correlation structure in the data - more states might be required, even if the step lengths and turning angles seem to be well described! 
Thus, I suggest to add two plots to plotPR(m), namely 
 acf(pseudoRes(m)$stepRes,na.action=na.pass)
and 
 acf(pseudoRes(m)$angleRes,na.action=na.pass)
such that you have a 3 by 2 array of plots. The na.action option is necessary since otherwise an error will be returned if there are missing data.

18. We probably need to add a brief description of summary.moveHMM to the vignette, don't we?

19.   plotStates(m1,animals=1:4)
(for the elk data) still doesn't seem to plot all animals' state probs. I only get the plots for elk-363. 
Also shouldn't the default be to plot all animals?

20. I will have a couple of comments on ?fitHMM - this is basically just a memo to myself!
